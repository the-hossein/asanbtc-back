// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(AsanBtcDbContext))]
    [Migration("20230814102322_addRelations3")]
    partial class addRelations3
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataLayer.Entities.Comment", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("CommentText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CommentTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ConfirmTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("ConfirmerUserId")
                        .HasColumnType("int");

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<int>("DisLikeNo")
                        .HasColumnType("int");

                    b.Property<int>("LikeNo")
                        .HasColumnType("int");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("int");

                    b.Property<string>("UserFullName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.HasIndex("ContentId");

                    b.HasIndex("ParentId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Comments");
                });

            modelBuilder.Entity("DataLayer.Entities.ConsultingRequest", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("ConsultingType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FactHeadId")
                        .HasColumnType("int");

                    b.Property<string>("Flname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SuggestedDate")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("IntId");

                    b.HasIndex("FactHeadId");

                    b.HasIndex("UserId");

                    b.ToTable("ConsultingRequests");
                });

            modelBuilder.Entity("DataLayer.Entities.Content", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<int?>("AdLocation")
                        .HasColumnType("int");

                    b.Property<int?>("AuthorUserAccountId")
                        .HasColumnType("int");

                    b.Property<bool>("Confirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ContentText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ContentTypeId")
                        .HasColumnType("int");

                    b.Property<int>("DisLikeNum")
                        .HasColumnType("int");

                    b.Property<string>("EnglishTitr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Favorite")
                        .HasColumnType("bit");

                    b.Property<string>("Files")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Keyword")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Label")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lead")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("LikeNum")
                        .HasColumnType("int");

                    b.Property<bool>("NewsPaper")
                        .HasColumnType("bit");

                    b.Property<string>("PicAlt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PicFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ReleaseTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ShowLocation")
                        .HasColumnType("int");

                    b.Property<string>("SourceLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SourceTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Telegram")
                        .HasColumnType("bit");

                    b.Property<bool>("TelegramSent")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Titr")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VisitNo")
                        .HasColumnType("int");

                    b.Property<string>("VoiceFile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.HasIndex("AuthorUserAccountId");

                    b.HasIndex("ContentTypeId");

                    b.ToTable("Contents");
                });

            modelBuilder.Entity("DataLayer.Entities.ContentType", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.ToTable("ContentTypes");
                });

            modelBuilder.Entity("DataLayer.Entities.ContentUserAccountEmail", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<int>("ContentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("SendDateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("int");

                    b.HasKey("IntId");

                    b.HasIndex("ContentId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("ContentUserAccountEmails");
                });

            modelBuilder.Entity("DataLayer.Entities.Course", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal?>("DiscountPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Duration")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("NumberOfSession")
                        .HasColumnType("int");

                    b.Property<bool>("Online")
                        .HasColumnType("bit");

                    b.Property<string>("PreviewImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewVideo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TeacherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.HasIndex("TeacherId");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("DataLayer.Entities.CourseSession", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Duration")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviewImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SessionNumber")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VideoFile")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.HasIndex("CourseId");

                    b.ToTable("CourseSessions");
                });

            modelBuilder.Entity("DataLayer.Entities.Crypto", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("ActiveVol")
                        .HasColumnType("float");

                    b.Property<int?>("CryptoId")
                        .HasColumnType("int");

                    b.Property<int?>("DecimalPlace")
                        .HasColumnType("int");

                    b.Property<double?>("High24h")
                        .HasColumnType("float");

                    b.Property<double?>("IcoPrice")
                        .HasColumnType("float");

                    b.Property<DateTime?>("IcoTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntroductionHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Low24h")
                        .HasColumnType("float");

                    b.Property<double?>("MarketVol")
                        .HasColumnType("float");

                    b.Property<double?>("MaxVol")
                        .HasColumnType("float");

                    b.Property<bool>("Mineable")
                        .HasColumnType("bit");

                    b.Property<double?>("PriceBtc")
                        .HasColumnType("float");

                    b.Property<double?>("PriceChange1hPercent")
                        .HasColumnType("float");

                    b.Property<double?>("PriceChange1wPercent")
                        .HasColumnType("float");

                    b.Property<double?>("PriceChange24hPercent")
                        .HasColumnType("float");

                    b.Property<double?>("PriceDolar")
                        .HasColumnType("float");

                    b.Property<double?>("PriceToman")
                        .HasColumnType("float");

                    b.Property<double?>("PriceUsdt")
                        .HasColumnType("float");

                    b.Property<int?>("QuoteOrderQty")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("ShortRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ShowAsIco")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFarsi")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Tradable")
                        .HasColumnType("bit");

                    b.Property<double?>("TradeVol24h")
                        .HasColumnType("float");

                    b.HasKey("IntId");

                    b.ToTable("Cryptos");
                });

            modelBuilder.Entity("DataLayer.Entities.Discount", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("DiscountCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DiscountPercent")
                        .HasColumnType("int");

                    b.Property<int?>("EventId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("IntId");

                    b.HasIndex("CourseId");

                    b.HasIndex("EventId");

                    b.HasIndex("UserId");

                    b.ToTable("Discounts");
                });

            modelBuilder.Entity("DataLayer.Entities.DollarPriceHistory", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<int>("DollarPriceToman")
                        .HasColumnType("int");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("IntId");

                    b.ToTable("DollarPriceHistories");
                });

            modelBuilder.Entity("DataLayer.Entities.Event", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("DescriptionHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EventTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Price")
                        .HasColumnType("int");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("DataLayer.Entities.Exchange", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<int>("Btchprice24Rls")
                        .HasColumnType("int");

                    b.Property<int>("BtclastPrice24Rls")
                        .HasColumnType("int");

                    b.Property<int>("BtclastPrice24Usdt")
                        .HasColumnType("int");

                    b.Property<int>("Btclprice24Rls")
                        .HasColumnType("int");

                    b.Property<decimal>("BtctradeVolume24Rls")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("FundDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("IntroductionHtml")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsIranian")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MarketCount")
                        .HasColumnType("int");

                    b.Property<int>("Rank")
                        .HasColumnType("int");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TitleFarsi")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.ToTable("Exchanges");
                });

            modelBuilder.Entity("DataLayer.Entities.FactorHead", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<DateTime>("FactDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Payed")
                        .HasColumnType("bit");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("IntId");

                    b.HasIndex("UserId");

                    b.ToTable("FactorHeads");
                });

            modelBuilder.Entity("DataLayer.Entities.FactorRow", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("FactorHeadId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.HasIndex("FactorHeadId");

                    b.ToTable("FactorRows");
                });

            modelBuilder.Entity("DataLayer.Entities.Hack", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("ContentLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Currency")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exchange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("HackDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.ToTable("Hacks");
                });

            modelBuilder.Entity("DataLayer.Entities.Ico", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("ContentLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("StartPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Symbol")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WebSite")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.ToTable("Icos");
                });

            modelBuilder.Entity("DataLayer.Entities.JunctionTable", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("FactorHeadId")
                        .HasColumnType("int");

                    b.HasKey("IntId");

                    b.HasIndex("CourseId");

                    b.HasIndex("FactorHeadId");

                    b.ToTable("JunctionTables");
                });

            modelBuilder.Entity("DataLayer.Entities.Listing", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("ContentLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exchange")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ExchangeLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ListingDate")
                        .HasColumnType("datetime2");

                    b.Property<TimeSpan?>("ListingTime")
                        .HasColumnType("time");

                    b.Property<string>("LogoFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pair")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.ToTable("Listings");
                });

            modelBuilder.Entity("DataLayer.Entities.Setting", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("AboutUs")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AcademySectionText")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AgoodNews")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("GeoLocationX")
                        .HasColumnType("float");

                    b.Property<double?>("GeoLocationY")
                        .HasColumnType("float");

                    b.Property<string>("InstagramPage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OurRules")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SiteEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TelegramChannel")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.ToTable("Settings");
                });

            modelBuilder.Entity("DataLayer.Entities.Stop", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("ContentLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Exchange")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoFile")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("StopDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("StopTime")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.ToTable("Stops");
                });

            modelBuilder.Entity("DataLayer.Entities.TinyPngApiKey", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("ApiKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Counter")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.HasKey("IntId");

                    b.ToTable("TinyPngApiKeys");
                });

            modelBuilder.Entity("DataLayer.Entities.TradeOrder", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<int>("CryptoId")
                        .HasColumnType("int");

                    b.Property<int?>("FactureHeadId")
                        .HasColumnType("int");

                    b.Property<string>("Flname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("MakingWallet")
                        .HasColumnType("bit");

                    b.Property<double?>("OfferPrice")
                        .HasColumnType("float");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Side")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TypeWallet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Value")
                        .HasColumnType("decimal(18,2)");

                    b.Property<double?>("Volume")
                        .HasColumnType("float");

                    b.Property<string>("WalletAddress")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.HasIndex("CryptoId");

                    b.HasIndex("FactureHeadId");

                    b.HasIndex("UserId");

                    b.ToTable("TradeOrders");
                });

            modelBuilder.Entity("DataLayer.Entities.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AccessLevel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("AddressVerified")
                        .HasColumnType("bit");

                    b.Property<string>("Avatar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankCardImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("BankCardNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("CellNumberVerified")
                        .HasColumnType("bit");

                    b.Property<string>("CellPhone")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CreditPoint")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Fname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdentityImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IdentityVerified")
                        .HasColumnType("bit");

                    b.Property<DateTime>("InsertDate")
                        .HasColumnType("datetime2");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsAdmin")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("LastUpdate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Lname")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCardImage")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NationalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("NewsPaper")
                        .HasColumnType("bit");

                    b.Property<string>("Pass")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Tel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TelNumberVerified")
                        .HasColumnType("bit");

                    b.Property<string>("TelegramTel")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("DataLayer.Entities.UserBill", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("BankOrderId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Bed")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("Bes")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("CryptoId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("FactHeadId")
                        .HasColumnType("int");

                    b.Property<bool>("IsOk")
                        .HasColumnType("bit");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OriginWallet")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PaymentGetway")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Rest")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("TransactionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool?>("Withdrawal")
                        .HasColumnType("bit");

                    b.HasKey("IntId");

                    b.HasIndex("CryptoId");

                    b.HasIndex("FactHeadId");

                    b.HasIndex("UserId");

                    b.ToTable("UserBills");
                });

            modelBuilder.Entity("DataLayer.Entities.UserEvent", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("CellPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EventId")
                        .HasColumnType("int");

                    b.Property<int>("FactHeadId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("InsertDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("IntId");

                    b.HasIndex("EventId");

                    b.HasIndex("FactHeadId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEvents");
                });

            modelBuilder.Entity("DataLayer.Entities.Wallet", b =>
                {
                    b.Property<int>("IntId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IntId"));

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CryptoId")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletDetail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("WalletMemo")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("IntId");

                    b.HasIndex("CryptoId");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("DataLayer.Entities.Comment", b =>
                {
                    b.HasOne("DataLayer.Entities.Content", "TheContent")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.Comment", "ParentComment")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("DataLayer.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserAccountId");

                    b.Navigation("ParentComment");

                    b.Navigation("TheContent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.ConsultingRequest", b =>
                {
                    b.HasOne("DataLayer.Entities.FactorHead", "FactorHead")
                        .WithMany()
                        .HasForeignKey("FactHeadId");

                    b.HasOne("DataLayer.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("FactorHead");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.Content", b =>
                {
                    b.HasOne("DataLayer.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("AuthorUserAccountId");

                    b.HasOne("DataLayer.Entities.ContentType", "ContentType")
                        .WithMany()
                        .HasForeignKey("ContentTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContentType");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.ContentUserAccountEmail", b =>
                {
                    b.HasOne("DataLayer.Entities.Content", "TheContent")
                        .WithMany()
                        .HasForeignKey("ContentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TheContent");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.Course", b =>
                {
                    b.HasOne("DataLayer.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.CourseSession", b =>
                {
                    b.HasOne("DataLayer.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");
                });

            modelBuilder.Entity("DataLayer.Entities.Discount", b =>
                {
                    b.HasOne("DataLayer.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");

                    b.HasOne("DataLayer.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId");

                    b.HasOne("DataLayer.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Course");

                    b.Navigation("Event");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.FactorHead", b =>
                {
                    b.HasOne("DataLayer.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.FactorRow", b =>
                {
                    b.HasOne("DataLayer.Entities.FactorHead", "FactorHead")
                        .WithMany()
                        .HasForeignKey("FactorHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FactorHead");
                });

            modelBuilder.Entity("DataLayer.Entities.JunctionTable", b =>
                {
                    b.HasOne("DataLayer.Entities.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.FactorHead", "FactorHead")
                        .WithMany()
                        .HasForeignKey("FactorHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("FactorHead");
                });

            modelBuilder.Entity("DataLayer.Entities.TradeOrder", b =>
                {
                    b.HasOne("DataLayer.Entities.Crypto", "Crypto")
                        .WithMany()
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.FactorHead", "FactorHead")
                        .WithMany()
                        .HasForeignKey("FactureHeadId");

                    b.HasOne("DataLayer.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId");

                    b.Navigation("Crypto");

                    b.Navigation("FactorHead");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.UserBill", b =>
                {
                    b.HasOne("DataLayer.Entities.Crypto", "Crypto")
                        .WithMany()
                        .HasForeignKey("CryptoId");

                    b.HasOne("DataLayer.Entities.FactorHead", "FactorHead")
                        .WithMany()
                        .HasForeignKey("FactHeadId");

                    b.HasOne("DataLayer.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crypto");

                    b.Navigation("FactorHead");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.UserEvent", b =>
                {
                    b.HasOne("DataLayer.Entities.Event", "Event")
                        .WithMany()
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.FactorHead", "FactorHead")
                        .WithMany()
                        .HasForeignKey("FactHeadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataLayer.Entities.UserAccount", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");

                    b.Navigation("FactorHead");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataLayer.Entities.Wallet", b =>
                {
                    b.HasOne("DataLayer.Entities.Crypto", "Crypto")
                        .WithMany()
                        .HasForeignKey("CryptoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Crypto");
                });
#pragma warning restore 612, 618
        }
    }
}
